%UNUSED. For copying stuff into the futarchy_trade tx.

-module(futarchy_batch).
-export([go/4, make_dict/4]).

-include("../../records.hrl").





-define(e2_16, 65536). %this is "one" in a certain perspective. we can store rationals from 1/this to this/1.
-define(e2_32, 4294967296). %the maximum number that can be expressed in thes system. is around 65536.

-record(futarchy_batch_tx,
        {pubkey, nonce, fee,
        fid, %futarchy id
        decision,%looking at the market that does not get reverted in this case.
         matching_true,%how many shares of true the lmsr market is buying. This counts all matched trades that are buying true. (shares can't be sold, so it is always positive)
         matching_false
        }). 
%        price, %the price that this batch will match at.
%        true_matched, %ids of unmatched bets on true that will be matched or partially matched in this batch.
%        false_matched});

make_dict(Pubkey, FID, Decision, Fee) ->
    Account = trees:get(accounts, Pubkey),
    <<_:256>> = FID,
    case Decision of
        0 -> ok;
        1 -> ok
    end,
    #futarchy_batch_tx{
      pubkey = Pubkey,
      nonce = Account#acc.nonce+1,
      fee = Fee, fid = FID,
      decision = Decision}.

go({signed, Tx, _Sig, 
    {PriceTrue,  %this is the price of true shares.
     PriceFalse,
     TruesMatched, FalsesMatched}},
   Dict, NewHeight, NonceCheck) ->
   #futarchy_batch_tx{
    pubkey = Pubkey, fid = FID, nonce = Nonce0, 
    fee = Fee, decision = Decision, 
    matching_true = MT, matching_false = MF
   } = Tx, 
    true = NewHeight > (forks:get(54)),
    case Decision of
        1 -> ok;
        0 -> ok
    end,
    true = (0 =< MT),
    true = (0 =< MF),
    true = ((PriceTrue + PriceFalse) =< ?e2_16),
    true = (length(TruesMatched) =< 50),
    true = (length(FalsesMatched) =< 50),
    Nonce = nonce_check:doit(
              NonceCheck, 
              Nonce0),
    Acc = accounts:dict_update(
             Pubkey, Dict, 
            -Fee, 
            Nonce),
    Dict2 = accounts:dict_write(Acc, Dict),
    Futarchy = futarchy:dict_get(FID, Dict2),
    #futarchy{active = 1, 
             batch_period = BP, 
              true_yes_orders = PTY,
              true_no_orders = PTN,
              false_yes_orders = PFY,
              false_no_orders = PFN,
              shares_false_yes = SFY,
              shares_false_no = SFN,
              shares_true_yes = STY,
              shares_true_no = STN,
             liquidity_true = LT,
             liquidity_false = LF} =
        Futarchy,

    %load up the lmsr market we care about.
    {Trues, Falses, LMSRBeta, Q1, Q2} = 
        case Decision of
            1 -> {PTY, PTN, LT, STY, STN};
            0 -> {PFY, PFN, LF, SFY, SFN}
        end,
  
    %how much liquidity the market provides in this case.
%    MML = lmsr:change_in_market(
%            LMSRBeta, Q1, Q2, 
%            Q1 + MT, Q2 + MF
%           ),

%check that the price written on the tx matches the new price in the lmsr after applying the changes.
    %A bigger price means that (Q1 - Q2) is bigger.
 
    Price0 = lmsr:price(LMSRBeta, Q1 + MT, Q2 + MF),
    {rat, PT, PB} = Price0,
    Price = ?e2_16 * PT div PB,

    %total cost to buy all of the shares in this batch, according to LMSR.
    LMSRCost = lmsr:change_in_market(
                 LMSRBeta, Q1, Q2, Q1+MT, Q2+MF),

    %total amount paid at the market clearing price.
    LMSRCost = ((MT * PriceTrue) + 
                    (MF * PriceFalse)) div ?e2_16,
    

    %this is the extra liquidity that the lmsr provides. It needs to be evenly shared between everyone in the single price batch.
    Extra = Paid - LMSRCost,
    

    %the lmsr provides extra liquidity in the direction that the price moves.
    {PriceTrue, PriceFalse} = 
        if
            Q1 > Q2 -> 
                EpS = Extra div MT,
                {Price - EpS, ?e2_32 div Price};
            true ->
                EpS2 = Extra div MF,
                {Price, (?e2_32 div Price) - EpS2}
        end,
  
    %walk down both sides of the order book, match everything you can at this price, the very last bet might only be partially matched. include the trade from the lmsr as well.
    %if there are more than 50 trades to match, then just match the first 50, but don't update the batch height counter, so that another batch can be made immediately.
    %wipe clean futarchy_unmatched that are no longer in use.
    {NewTruesID, FinishedBatch0, Dict3} = 
        match(Trues, Price1, MT, Dict2, TruesMatched),
    {NewFalsesID, FinishedBatch1, Dict4} =
        match(Falses, Price2, FT, Dict3, FalsesMatched),

    FinishedBatch = (FinishedBatch0 and 
        FinishedBatch1),
    TM50 = (length(TruesMatched)) == 50,
    FM50 = (length(FalsesMatched)) == 50,

    %make sure we either finish the batch, or we are matching at least 50 trades.
    if
        FinishedBatch -> ok;
        (TM50 or FM50) -> ok
    end,
    
    Futarchy2 = 
        if
            FinishedBatch ->
                Futarchy#futachy{last_batch_height=0};
            true ->
                Futarchy
        end,
    Futarchy3 = 
        case Decision of
            0 ->
                Futarch2#futarchy{
                  false_yes_orders = NewTruesID,
                  false_no_orders = NewFalsesID,
                  shares_false_yes = Q1+MT,
                  shares_false_no = Q2+MF
                 };
            1 ->
                Futarchy2#futarchy{
                  true_yes_orders = NewTruesID,
                  true_no_orders = NewFalsesID,
                  shares_true_yes = Q1+MT,
                  shares_true_no = Q2+MF
                 }
        end,
    futarchy:dict_write(Futarchy3, Dict4).
    %update the futarchy to point to the new roots.


match(ID, Price, Many, Dict, N) ->
    %returns {newid, finished?, dict2}
    FU = futarchy_unmatched:dict_get(ID, Dict),
    #futarchy_unmatched{
                         revert_amount = A, limit_price = LimitPrice, behind = Next
                         } = FU,
    ok.
